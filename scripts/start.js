const paths = require('../config/paths')

// Do this as the first thing so that any code reading it knows the right env.
process.env.BABEL_ENV = 'development'
process.env.NODE_ENV = 'development'

// Makes the script crash on unhandled rejections instead of silently
// ignoring them. In the future, promise rejections that are not handled will
// terminate the Node.js process with a non-zero exit code.
process.on('unhandledRejection', (err) => {
    throw err
})

// Ensure environment variables are read.
require('../config/env')

const webpack = require('webpack')
const WebpackDevServer = require('webpack-dev-server')
// const paths = require('../config/paths')
const config = require('../config/webpack.config.dev')
const PORT = parseInt(process.env.PORT, 10) || 3000
const HOST = process.env.HOST || '0.0.0.0'
// const { checkBrowsers } = require('../helper/browsers')

// checkBrowsers(paths.appPath)
//     .then((port) => {
if (PORT === null) {
    // We have not found a port.
    return
}

const options = {
    // Can't use gzip compression, because it causes SSE buffering
    compress: false,
    // Use /static/ as the default content base
    contentBase: paths.appPublic,
    // Allow connection HMR websocket
    disableHostCheck: true,
    // index.html will catch all routes (allowing Router to do it's thing)
    historyApiFallback: true,
    // Hot module replacement (only in 'development' mode)
    hot: true,
    // Allow serving externally
    host: '0.0.0.0',
    port: 8080,
    // Enable HTTPS and HTTP/2
    https: false,
    // Hide the webpack bundle information
    noInfo: true,
    // Match public path with output path
    publicPath: '/'
}

// Create a webpack compiler that is configured with custom messages.

WebpackDevServer.addDevServerEntrypoints(config, options)
const compiler = webpack(config)
// Serve webpack assets generated by the compiler over a web server.
const devServer = new WebpackDevServer(compiler, options)

// Launch WebpackDevServer.
devServer.listen(PORT, HOST, (err) => {
    if (err) {
        return console.log(err)
    }

    console.log(`webpack-dev-server listening on ${HOST}:${PORT}`)
})
;['SIGINT', 'SIGTERM'].forEach(function(sig) {
    process.on(sig, function() {
        devServer.close()
        process.exit()
    })
})
// })
// .catch((err) => {
//     if (err && err.message) {
//         console.log(err.message)
//     }
//     process.exit(1)
// })
